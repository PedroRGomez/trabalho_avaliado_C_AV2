#include <stdio.h>

void bubbleSort(int vetor[], int n) {
    int i, j, temp;
    for (i = 0; i < n-1; i++) {
        for (j = 0; j < n-i-1; j++) {
            if (vetor[j] > vetor[j+1]) {
                temp = vetor[j];
                vetor[j] = vetor[j+1];
                vetor[j+1] = temp;
            }
        }
    }
}

void insertionSort(int vetor[], int n) {
    int i, chave, j;
    for (i = 1; i < n; i++) {
        chave = vetor[i];
        j = i - 1;
        while (j >= 0 && vetor[j] > chave) {
            vetor[j+1] = vetor[j];
            j = j - 1;
        }
        vetor[j+1] = chave;
    }
}

void imprimirVetor(int vetor[], int n) {
    int i;
    for (i = 0; i < n; i++) {
        printf("%d ", vetor[i]);
    }
    printf("\n");
}

int main() {
    int opcao, n, i;
    
    printf("Informe o tamanho do vetor: ");
    scanf("%d", &n);
    
    int vetor[n];
    
    printf("Informe os elementos do vetor:\n");
    for (i = 0; i < n; i++) {
        scanf("%d", &vetor[i]);
    }
    
    printf("\nEscolha uma opção de ordenação:\n");
    printf("1. Bubble Sort\n");
    printf("2. Insertion Sort\n");
    printf("Opção: ");
    scanf("%d", &opcao);
    
    printf("\nVetor original: ");
    imprimirVetor(vetor, n);
    
    switch (opcao) {
        case 1:
            bubbleSort(vetor, n);
            printf("Vetor ordenado usando Bubble Sort: ");
            imprimirVetor(vetor, n);
            break;
        case 2:
            insertionSort(vetor, n);
            printf("Vetor ordenado usando Insertion Sort: ");
            imprimirVetor(vetor, n);
            break;
        default:
            printf("Opção inválida!\n");
    }
    
    return 0;
}
